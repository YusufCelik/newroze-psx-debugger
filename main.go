package main

import (
	"encoding/binary"
	"encoding/hex"
	"flag"
	"fmt"
	"io"
	"net"
	"strconv"
	"strings"

	"github.com/jacobsa/go-serial/serial"
)

type SerialConfig struct {
	baud   int
	device string
}

type GdbConfig struct {
	tcpPort string
}

type DebuggerState struct {
	continueAddress string
}

type serialport io.ReadWriteCloser

func initializeSerialPort(device string, baud int) serialport {
	options := serial.OpenOptions{
		PortName:              device,
		BaudRate:              uint(baud),
		DataBits:              8,
		StopBits:              1,
		InterCharacterTimeout: 100,
		MinimumReadSize:       0,
	}

	port, err := serial.Open(options)

	if err != nil {
		fmt.Println("Could not open serial port!")
	}

	return port
}

func parseMemoryWrite(buffer string) (string, string, []byte) {
	addrEnd := strings.Index(buffer, ",")

	addr := buffer[1:addrEnd]

	writeEnd := strings.Index(buffer, ":")

	size := buffer[addrEnd+1 : writeEnd]

	data, err := hex.DecodeString(buffer[writeEnd+1:])

	if err != nil {
		fmt.Println("Could not decode data string to hex")
	}

	return addr, size, data
}

func parseMemoryRead(buffer string) (string, string) {
	addrEnd := strings.Index(buffer, ",")

	addr := buffer[1:addrEnd]

	for (8 - len(addr)) > 0 {
		addr = "0" + addr
	}

	// if addr[1] == '5' {
	// 	addr = "801" + addr[3:]
	// }

	size := buffer[addrEnd+1:]

	return addr, size
}

func parseRegisterAddress(buffer string) string {
	startIndex := strings.Index(buffer, "=")

	addr := buffer[startIndex+1 : startIndex+9]

	addrDecoded, _ := hex.DecodeString(addr)
	addrDecodedBytes := binary.LittleEndian.Uint32(addrDecoded[0:])

	reversedAddrStr := fmt.Sprintf("%x", addrDecodedBytes)

	return reversedAddrStr
}

func parseBreakpointWrite(buffer string) string {
	// example command: $Z0,80100018,4#a8

	startIndex := strings.Index(buffer, ",")

	addr := buffer[startIndex+1 : startIndex+9]

	return addr
}

func acknowledgeResponse(serialPort serialport) bool {
	tmpBuffer := make([]byte, 1)

	for {
		_, err := serialPort.Read(tmpBuffer)
		fmt.Println(string(tmpBuffer))

		if err != nil {
			fmt.Println("Could not read registers from PSX", err, tmpBuffer)
			break
		}

		if string(tmpBuffer) == "+" {
			fmt.Println("Acknowledgment came")
			serialPort.Write([]byte("+"))
			return true
		}

		if string(tmpBuffer) == "-" {
			fmt.Println("Failure again")
			return false
		}
	}

	return false
}

func writeMemoryCommandToPsx(serialPort serialport) {
	nw, werr := serialPort.Write([]byte(formatGdbPacket("M")))

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write command")
		writeMemoryCommandToPsx(serialPort)
	}
}

func writeCommandToPsx(serialPort serialport, cmd string) {
	nw, werr := serialPort.Write([]byte(formatGdbPacket(cmd)))

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write command")
		writeCommandToPsx(serialPort, cmd)
	}
}

func writeAddressToPsx(serialPort serialport, addr string) {
	nw, werr := serialPort.Write([]byte(formatGdbPacket(addr)))

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write address")

		writeAddressToPsx(serialPort, addr)
	}
}

func writePacketSizeToPsx(serialPort serialport, size string) {
	nw, werr := serialPort.Write([]byte(formatGdbPacket(size)))

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write size")

		writePacketSizeToPsx(serialPort, size)
	}
}

func writeChecksumToPsx(serialPort serialport, data []byte) {
	var checksumTotal int64

	for _, b := range data {
		checksumTotal += int64(b)
	}

	checksumTotal = checksumTotal % 256

	hexChecksum := strconv.FormatInt(checksumTotal, 16)

	if len(hexChecksum) < 2 {
		hexChecksum = "0" + hexChecksum
	}

	nw, werr := serialPort.Write([]byte(formatGdbPacket(hexChecksum)))

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write size")

		writeChecksumToPsx(serialPort, data)
	}
}

func writeDataToPsx(serialPort serialport, data []byte) {
	nw, werr := serialPort.Write(data)

	if werr != nil {
		fmt.Println("Could not write bytes")
	}

	fmt.Println("wrote", nw)

	res := acknowledgeResponse(serialPort)

	if res == false {
		fmt.Println("failed to write size")

		writeDataToPsx(serialPort, data)
	}
}

func writeMemoryToPsx(serialPort serialport, addr string, size string, data []byte) {
	fmt.Println("Writing memory command")
	writeMemoryCommandToPsx(serialPort)

	fmt.Println("Writing address command")
	writeAddressToPsx(serialPort, addr)

	fmt.Println("Writing size command")
	writePacketSizeToPsx(serialPort, size)

	fmt.Println("Writing checksum command")
	writeChecksumToPsx(serialPort, data)

	fmt.Println("Writing data command")
	writeDataToPsx(serialPort, data)
}

func writeRegisterToPsx(serialPort serialport, addr string) {
	fmt.Println("Writing memory command")
	writeCommandToPsx(serialPort, "P")

	fmt.Println("Writing address command")
	writeAddressToPsx(serialPort, addr)
}

func clearMemoryOnPsx(serialPort serialport) {
	startAddrBytes, _ := hex.DecodeString("80100000")
	startAddr := binary.BigEndian.Uint32(startAddrBytes[0:])

	for x := 0; x < 315; x++ {
		writeAddr := fmt.Sprintf("%x", startAddr)

		addr, size, data := parseMemoryWrite("M" + writeAddr + ",50:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

		writeMemoryToPsx(serialPort, addr, size, data)
		startAddr = startAddr + 80
	}

	fmt.Println("Completed clearing memory")
}

func testWriteMemoryOnPsx(serialPort serialport) {
	testData := []string{
		"M80100000,50:d0febd272c01bfaf2801beaf25f0a0033001c4af3401c5af320002241c00c2af252000008203040c000000002000c327f00002241000a2af400107242530000025280000252060002b02040c00000000",
		"M80100050,50:2000c22714004324f00002241000a2af40010724f000062425280000252060002b02040c000000004800c327f00002241000a2af40010724f000062425280000252060003802040c000000004800c227",
		"M801000a0,50:5c004324f00002241000a2af400107242530000025280000252060003802040c000000006100c0a3600002246200c2a36300c0a3bd00c0a360000224be00c2a3bf00c0a3010002246000c2a301000224",
		"M801000f0,50:bc00c2a31800c0af0001c2270a00062466000524252040004f0e040c000000002000c4271800c38f00000000251060008010020021104300801002002110820025204000ab02040c000000004800c427",
		"M80100140,50:1800c38f00000000251060004010020021104300c0100200231043008010020021108200252040002103040c0000000025280000c0030424a300040c00000000640002241400a2af1000a0afe0000724",
		"M80100190,50:400106240800052425200000f400040c000000001080023c80394524ffff04242c01040c000000001c00c68f1080023c90394524ffff04242c01040c00000000ffff04245501040c000000001800c28f",
		"M801001e0,50:000000000100422cff0042301800c2af252000005b02040c0000000025200000d303040c000000002000c4271800c38f00000000251060008010020021104300801002002110820025204000ab02040c",
		"M80100230,50:000000004800c4271800c38f00000000251060004010020021104300c0100200231043008010020021108200252040002103040c00000000010004246e04040c000000001c00c28f0000000001004224",
		"M80100280,50:1c00c2afc7ff001000000000c0ffbd273800b1af258880001080043c3400b0af105984242580a0003c00bfaf0402040c1000a5271c00a38f003c100007006488033c0700033207000400649883111100",
		"M801002d0,50:003106002000a58f0f004230008c11002518800025104600038c11002400a4272600a7a72800a3af0a8082a78202040c2400b1a75b02040c252000001400a28f1800a58f030044880700438800004498",
		"M80100320,50:040043981c00a28f2400a4af2800a3af0600439403111100218003020084100003841000801910003f004230251043002400a427088082a72400b1a78202040c2600b0a75b02040c252000000480828f",
		"M80100370,50:0000000011004010000000000e0040181080103c60621026258800000000048e410e040c010031260800048e410e040c1c0010260480828f000000002a102202f6ff401400000000048080af3c00bf8f",
		"M801003c0,50:3800b18f3400b08f0800e0034000bd270480828fd8ffbd271400b0afc08002001800b1af238002021080113c1c00b2af606231263c00b28f80801000218030022000b3af2400bfaf3800b38f0c0004a6",
		"M80100410,50:0e0005a601004426100006a6ee0d040c120007a6000002ae1f00601200211200180084240480908fee0d040c000000000480858fc0201000c01805002318650080180300211823022320900080200400",
		"M80100460,50:0000668c21882402080022ae180072ac0000c0a00000648c2400bf8f0100a224140073ac1c00b28f2000b38f1800b18f1400b08f040064ac048082af2510a0000800e0032800bd27e2ff001008008424",
		"M801004b0,50:d8ffbd272000b1af2400bfaf1c00b0af2588a0003000a6af040081043400a7af0480908f00000000ffff0426c0800400238004021080043c6062842480801000218004020000048eee04040c00000000",
		"M80100500,50:1800058e000000002a1845000c0060103000a3270400048e25386000253020022328a2000b06040c1000a3af0400038e0000048e21106200ee04040c040002ae2400bf8f2000b18f1c00b08f0800e003",
		"M80100550,50:2800bd27c0ffbd273c00bfaf3800beaf3400b7af3000b6af2c00b5af2800b4af2400b3af2000b2af1c00b1af9e0080041800b0af25988000c01013001000a2af1080113c231053006062312680100200",
		"M801005a0,50:211022020800578c0a8083970c0047840e00458400005e8c0400e3aee1ff03240700e3a21400428c0100032425b0e0002590a0000300e3a21e0040100800f0260300042402000324860043100b00e4a2",
		"M801005f0,50:600002240f00e2a21000a28f0000e38e2310530080100200211022021000499412004894ff00023cffff42342420020200ff023c24106200251044001800e3261000e7a61200e5a61400e9a61600e8a6",
		"M80100640,50:0c00e0a60e00e0a20000e2ae25b80002258060001000a28fff00143c23a8530080a815000000c58321a83502ffff94362520a0003600a0100a0002240c00a7865800a210000000001000a3862310c702",
		"M80100690,50:f9ff63242a1043004f004010000000001200a2860e00a386f9ff4224231843022a1062002600401000000000d404040c00000000dfff43240f006430210042280319030080ff0524c0200400c0180300",
		"M801006e0,50:150040142438140203000224030002a274000224070002a2088082970d0003a2080016a6040005a2050005a2060005a20a0012a60c0004a20e0002a60000e28e00ff033c24104300251047000000e2ae",
		"M80100730,50:25b80002100010260100c5830800d6260100de272520a000ccffa0140a0002240000e28eff00033cffff6334251043000000e2ae5b02040c252000001000a28f00000000239053008090120021883202",
		"M80100780,50:0800248e4602040c000000005b02040c252000000000228e00000000040022ae000040a03c00bf8f0800228e3800be8f3400b78f3000b68f2c00b58f2800b48f2400b38f2000b28f1c00b18f1800b08f",
		"M801007d0,50:0800e0034000bd2708005226a4ff001025b0e0000100c5830800522625b0e0009fff00100100de270480938f62ff0010ffff7326620002247bff00100f00e2a20000828c10000324ff0046300300c310",
		"M80100820,50:000000000800e0030100022402120200ff0042301b004014000000000400838c08008224080066300800c0140000a3ac040043240c0042241000a2ac0800a0ac0c00a3ac0800e003251000000800838c",
		"M80100870,50:0c00862482180300801803002110430004004324140084240c0042241000a2ac0400a6ac0800a4ac0c00a3ac0800e003251000000800e003020002241000a38f25108000000085a4020086a4040087a4",
		"M801008c0,50:060083a4080080a40a0080a40c0080a40e0080a4100080a40800e003120080a01000a38f25108000060083a40100033c0a006324000085a4020086a4040087a4080080ac0c0080ac100080ac140083ac",
		"M80100910,50:0800e003180080acfcffbd270000bfaf801f073c0004023c020042341418e2ac7e03040c000000008216020001004230fbff401000000000a010e4aca410e0ac0001023c01044234a810e2ac0000bf8f",
		"M80100960,50:0400bd270800e0030000000022008014801f043cfcffbd270000bfaf7e03040c0000000042170200030042301000401000000000a810828c000000000216020001004230fbff4014000000007e03040c",
		"M801009b0,50:00000000821602000500423005000124faff41140000000007000010000000007e03040c000000000217020001004230fbff4010000000000000bf8f0400bd270800e00300000000a410828c00000000",
		"M80100a00,50:0800e00302140200f8ffbd270000bfaf0400b0af801f103c7e03040c00000000821602000500423005000324faff4314000000000004023c141802ae0001023c101802ae00a0033c101803ae0000828c",
		"M80100a50,50:0400838c101802ae101803ae0004023c02004234141802ae040082940600839400000000180043001218000002190300001c030008006334a01005aea41003ae0001023c01024234a81002ae0000bf8f",
		"M80100aa0,50:0400b08f0800e0030800bd27801f073c04008684080082840c008384252800003102c12829002010000000009101c1281e002010000000006101c12813002010000000001901c1280800201000000000",
		"M80100af0,50:0a000124180023004e020624801002002030c20020000010000a03240800012418002300580206240100a534801002002030c20018000010000a032407000124180023001b0206246400a53480100200",
		"M80100b40,50:2030c20010000010800a03240500012418002300670206240200a534801002002030c20008000010000a032404000124180023006c0206240300a534801002002030c200000a03241210000002004014",
		"M80100b90,50:00000000251060002110460000130200ff0fc6302530c2000006023c251046001418e2ac06008284100006240101412802002014000000000400a5340a0082840e0083842030c2000200601400000000",
		"M80100be0,50:f000032420186600ff03c630801a0300251866000007023c251862001418e3ac1080023c48624224000042900000000002004010000000000800a534100082901100839002004010000000002000a534",
		"M80100c30,50:02006010000000001000a534100082900000000002004010000000008000a5340008023c2528a2001418e5ac0000829402008394ff034230ff016330801a0300251043000005033c251043000800e003",
		"M80100c80,50:1418e2acfcffbd270000bfaf1c008524ff04023cffff42340000a2ac0000829402008394ff034230ff016330801a03002510430000e3033c251043000400a2ac0400829400008194ffff422421082200",
		"M80100cd0,50:ff0321300600839402008294ffff632421104300ff014230801202002508220000e4023c250822000800a1ac00008294080083940000000020104300ff074130020082940a0083940000000020104300",
		"M80100d20,50:ff074230c01202002508220000e5023c250822000c00a1ac140081941600829017008390010042300100633040120200801a0300250822002508230000e1023c250822001000a1ac1800829000000000",
		"M80100d70,50:15004010000000001800828c0002033c02120200251043001400a2ac0000828c0400838c1800a2ac02140300ff0141280500201400000000ff01022400140200ffff6330251862001c00a3acff07023c",
		"M80100dc0,50:ffff42340000a2ac7e03040c000000008216020001004230fbff4010000000004602040c2520a0000000bf8f0400bd270800e00300000000801f023c1418428c0800e00300000000f8ffbd270000bfaf",
		"M80100e10,50:0400a4af1080822700004290000000002d00401400000000801f073c333b023c333b4234f010e2acf410e0ac7410e0ac1080822701000324000043a014808227000040ac1080053ce810a5247604040c",
		"M80100e60,50:000004241080043c88618424a304040cfcffbd270400bd27252000009604040cfcffbd270400bd2703000424252800009904040cf8ffbd270800bd279304040c000000001080043cc861842425280000",
		"M80100eb0,50:253000001080053c5861a5241080063c8861c6248d04040cf0ffbd271000bd279c04040c00000000801f073c1418e28c1000033c241043001880832703004010000060ac01000224000062ac0400a48f",
		"M80100f00,50:801f073c001d02241411e2ac0100012407008110000000000300012405008110000000001418e0ac0400001000000000a810e0ac010002241418e2ac0000bf8f0400a48f0800e0030800bd27f4ffbd27",
		"M80100f50,50:0000bfaf0400b0af801f073c1418f08c1011e28c000000001011e38c00000000fbff4314000000001080073c5461e7240000e38c0000000023104300ffff423001000124220081100800a2af07008104",
		"M80100fa0,50:000000001080023c506142240000428c00000000220000100800a2af0200801400000000010004241080023c506142240000428c010085241504040c212044004000023c241002020d00401000000000",
		"M80100ff0,50:801f073c1418e28c0000000026100202070040040080043c1418e28c000000002610020224104400fbff4010000000001080063c5461c6241011e28c000000001011e38c0000c2acfbff431400000000",
		"M80101040,50:0000bf8f0400b08f0800a28f0800e0030c00bd27fcffbd270000bfafc02b05001080023c506142240000428c000000002a0844001800201000000000ffffa524ffff03240d00a314000000001080043c",
		"M80101090,50:b86184249004040cf8ffbd279604040c25200000030004249904040c252800000800bd2708000010ffff02241080023c506142240000428c000000002a084400eaff2014000000000000bf8f0400bd27",
		"M801010e0,50:0800e00325100000801f043c1080033c506163240000628c0000000001004224000062ac148082270000428c000000000800401000000000fcffbd270000bfaf09f84000000000000000bf8f0400bd27",
		"M80101130,50:801f043c0800e00300000000801f043c7410828c00000000061022020100423013004010000000007010828c0000000006102202010042300d004010000000000000038e000000007010828c01000524",
		"M80101180,50:04282502ffff06242628a600701085ac030060100000000009f8600000000000040010260b00212ae4ff201401003126a004040800000000801f033c010084300003023c0100423422104400141862ac",
		"M801011d0,50:0800e00300000000801f063c0700a010000000007410c28c010003240418830025104300080000107410c2ac7410c28c0100032404188300ffff012426186100241043007410c2ac1080063c5861c624",
		"M80101220,50:801804002118c3000000628c0800e003000065aca0000a24080040013f000924a0000a24080040013e000924a0000a240800400172000924b0000a24080040015b000924c0000a24080040010a000924",
		"M80101270,50:020004240c0000000800e00300000000b0000a240800400117000924b0000a240800400119000924e0ffbd271c00bfaf1800b2af1400b1af1000b0af11801c3cd50d040c30e29c271080023c6839518c",
		"M801012c0,50:000000000900201a6839422480801100218050000000028e0000000009f84000ffff3126fbff2016fcff102625280000252000000000040c1080123c7039428e000000000c0040181080103c74391026",
		"M80101310,50:258800000000028e0000000009f84000010031267039428e000000002a102202f8ff4014040010261c00bf8f1800b28f1400b18f1000b08f0800e0032000bd279fff82241a00422c0300401000000000",
		"M80101360,50:0800e003e0ff82240800e003251080000000a3802510800009006014253880000800e0030000e0a0ffffe3a00100a5240000a3800000000004006010ffffc624f9ffc0140100e724ffffe7240000e0a0",
		"M801013b0,50:0800e00300000000000082800000000009004010010083242310640001006324ffff658000000000fbffa014000000000800e003000000000800e003251000000100022420008210020082280e004014",
		"M80101400,50:000000000400842820008010000000001e00c010000000000000a28c000000001a00410400000000231002000000a2ac0800e0030100022414008014000000000000a28c00000000ff0043300f00c010",
		"M80101450,50:0000a3ac800042300c0040100000000000ff022425186200231803000000a3ac0800e003010002240000a28c00000000ffff43300300c0140000a3ac0800e0032510000000804230fcff401000000000",
		"M801014a0,50:ffff023c25186200231803000000a3ac0800e003010002242510000001000b2414000924ffff0a242600201125388000010003242538000080400300211803010100e724fcffe9144018030002006014",
		"M801014f0,50:1b0083000d000700123800000d00e014000000000c006011000000000a00201100000000ffff2925ebff2a1500000000020046102128a2000000a0a00800e0030000000025580000020060141b008300",
		"M80101540,50:0d00070010200000f2ffc210000000002118a2003000e724000067a0edff001001004224e5ff001001000324c8ffbd272000b4af0f00143cffff94361400b1af24a08502028d05003000beaf2c00b7af",
		"M80101590,50:2800b6af2400b5af1c00b3af1800b2af1000b0af3400bfaf25a8800025f0c00025b0e000c2bf0500ff07313225988000340010240a000010409014000618140201006330020060143100042430000424",
		"M801015e0,50:570e040cffff102608000012ff000224271010002000043204105200f3ff801406181302f2ff0010251843005b0022121000023c01fc262663450d3c25a082022b28d1008291ad3533000a24ffffa524",
		"M80101630,50:340002242560000025200000404814002350460140780d00f4440e3c01000b24ffff0824200043302a00601027380200061854000100633008006010ffffc3242800a0042000c330020060100418cb00",
		"M80101680,50:2518000021208300ffffc3242b386600ffffa524ffff422425306000edff48142128e5002700e0162530c0022e05040c2528c00323b0c2020600c012000000002128c203ffffd6262e0002244200c016",
		"M801016d0,50:0000a2a03400bf8f3000be8f2c00b78f2800b68f2400b58f2000b48f1c00b38f1800b28f1400b18f1000b08f0800e0033800bd270438e90006185500d5ff00102518e30023184201200067300400e010",
		"M80101720,50:2738030006186d00d7ff0010216083010438ef0006186e002518e300d2ff001021608301d9ffc012000000002d0002240000c2a3ffffd6260100de272530c0022e05040c2528c00323b0c202d4ffc016",
		"M80101770,50:00000000d7ff00100000000025a09502120080162530c0022500e012000000001080053c9c39a5243400bf8f2c00b78f2800b68f2400b58f2000b48f1c00b38f1800b28f1400b18f1000b08f2520c003",
		"M801017c0,50:3000be8fdc0404083800bd271080053cf1ff0010a839a5240700c22a020040142530c002060006243400bf8f3000be8f2c00b78f2800b68f2400b58f2000b48f1c00b38f1800b28f1400b18f1000b08f",
		"M80101810,50:0100a524252080012e0504083800bd271080053cdcff0010a439a524a8ffbd273c00b3af259880002520c0004800b6af4400b5af3800b2af5400bfaf5000beaf4c00b7af4000b4af3400b1af3000b0af",
		"M80101860,50:25a8c00025b0e000ee04040cffffb2243603401825a0400010800a3c10800b3c25b80000254800000200082425f0000025380000258800002580000010800c3c743c4a2530466b252128b10201002326",
		"M801018b0,50:0000a480253060000d00e01025680002e0ff8224ff00423059004e2c6a02c01110800e3c80100200ac39ce252110c2010000428c00000000080040000000000025000224190082102b28b20101001026",
		"M80101900,50:2800a0102510000221686d020000a4a1258860002a183402e4ff60142128b10221986202000060a25400bf8f251000025000be8f4c00b78f4800b68f4400b58f4000b48f3c00b38f3800b28f3400b18f",
		"M80101950,50:3000b08f0800e0035800bd272a107400930240102128a3020000a88000000000e0ff0225ff0042305900442c2c04801002002e261080043c80100200103b8424211082000000428c0000000008004000",
		"M801019a0,50:00000000dbff0010258860002530c00125b800002548000025f00000020008240000c48e00000000b50280100400d62600008590000000000004a0100400c733251080000200e01200000000fffff726",
		"M801019f0,50:010042240000439000000000f9ff6014000000005303e0100000000001001026ffff03262b187200030060102510000221187002ffff65a0010084240000859000000000f5ffa01400000000e903e014",
		"M80101a40,50:2588c000b4ff00102a1834022530c00125b800002548000025f0000002000824010010262b18b201af0260102510000221686d02250003240000a3a12588c000a4ff0010253800002530c00125b80000",
		"M80101a90,50:2548000025f00000020008240000c48e010010262b18b2010400d6261000a4af9d0260102510000221686d020000a4a12588c00093ff0010253800002530c00125b800002548000025f0000002000824",
		"M80101ae0,50:0000c28e2588c000000050ac0400d6262510000287ff00102538000066000224da05821067008228d305401468000224d8058214690002240100232610800f3c10800e3c1080073ccc44ef259447ce25",
		"M80101b30,50:6843e72487020015258860002a1074001b0240102128a3020000a48001006324e0ff8224ff0042305900582c140400132530600080100200211042010000428c00000000080040000000000025886000",
		"M80101b80,50:0000cd8e3f0006240400d6261000adaf0100042415000724ffff0e240618cd00070063302802601025280002010010262b20b20022028010251000023000632425200000212865020000a3a0ffffe724",
		"M80101bd0,50:f2ffee14fdffc6244eff00102538000025886000f8ff02240700d62624b0c2020400c58e0000c48e446b8625400007242800abaf2400aaaf2000a9af1c00a8af5b05040c1800acaf1800ac8f00000000",
		"M80101c20,50:446b85811c00a88f2000a98f2400aa8f2800ab8f7f04a0100800d6261080043c456b842401001026ffff03262b187200030060102510000221187002ffff65a001008424ffff858000000000f5ffa014",
		"M80101c70,50:2538000028ff00102a183402258860000000c68e1f0007240618e600010063300400d6261000a6af01000424ffff0d241100601025280002010010262b20b200e10180102510000230006324001e0300",
		"M80101cc0,50:031e030025200000212865020000a3a0ffffe724c0ffed100618e60001006330f1ff601425280002efff8010000000005304e01000000000f5ff0010251000020200022998014014000000002588c000",
		"M80101d10,50:25100002fffe001001000724253020020200082477022011000000008010170021b8570040b817002588c00025100002f4fe001025382001750002243b06821425f0000001000924020008240400c226",
		"M80101d60,50:0000c58e5e0200110400c733010003240200031500000000ffffa5301000a5af2588c00025b040002568e0022520000001000224130006248018020021186200fe01801040180300020040141b00a200",
		"M80101db0,50:0d000700121000000200401000000000ffffad250300861001008424f2ff0010251060000200a10525b8a00125b800000902e01000000000257800000100062413000424ffff0e24a101801025c8a000",
		"M80101e00,50:0100032425c00000801003002110430001001827fcff041740180200020060141b00a3000d00070012c800007201201725c000027001c01000000000060480100000000025100002ffff8424eaff8e14",
		"M80101e50,50:000000001904e01500000000aefee0102a1834025cffa01925180002252800002000062401006324ffff64242b20920004008010251060002120b00021206402000086a00100a5242a20b700f5ff8014",
		"M80101ea0,50:00000000258060009afe00102538000025302002fffff726258860000000c48e0400c226010200111000a4af010003240300031525b04000ffff84301000a4af700002240b04c210000000000100c233",
		"M80101ef0,50:0c004010253000002b1812020b026014010002260000a3805800062425026610020010262b185200280260142110620225300000251800000800072480100300061044000f0042300200401000000000",
		"M80101f40,50:2530600001006324f9ff6714801003002330e6020200c10425b8c00025b800000400c733bf01e0100000000001000d240700032458000f2412000010ffff0e24010010260a004d28ff0059301600a015",
		"M80101f90,50:251000020000ad80000000006501af112b6812030400a0112568000021c0780257003927000019a3ffff632413006e100000000080100300061044000f004230ebff401425c000022d01a01525c80000",
		"M80101fe0,50:01001026251000022b681203f2ffa011256800003000392721c07802000019a3ffff6324efff6e140000000042fee0102a183402f0fec01825180002252800002000062401006324ffff64242b209200",
		"M80102030,50:04008010251060002120b00021206402000086a00100a5242a20b700f5ff801400000000258060002efe0010253800002530600025f0000002000824010009240200c7332588c000251000020200e010",
		"M80102080,50:fdff032424f0c3030400de3721fe0010010007242530600025f0000002000824010009240100de372588c0002510000218fe0010010007242530600025f00000020008248010170021b8570040b81700",
		"M801020d0,50:d0ff842421b897002588c00025100002010009240bfe0010010007242a1074003e0340102128a3020000a4806300022404002626490582102568000264008228c10240106e0002242d00022461058210",
		"M80102120,50:2e00822854054010230002244f05821025f0000024008228440040142500022448058210010009242b0002243e05821400000000020008241000de372588c00025100002ebfd00100100072466000224",
		"M80102170,50:3e04821067008228420440146800022466fe82100100232669000224e80282142588c00002000824010009240400c7332588c0002510c0020000428c25200001010006241000a5272800abaf2400aaaf",
		"M801021c0,50:2000acaf1c00a9af1800a8affc04040c1000a2af1800a88f1c00a98f2000ac8f2400aa8f2800ab8fde0040100400d6262b10b2014901401401001026ffffee261000a68f252000000100022413000524",
		"M80102210,50:8018020021186200dc00801040180300020040141b00c2000d000700121000000200401000000000ffffce251100851001008424f2ff00102510600020000224fd0482140000000025f0000002000824",
		"M80102260,50:010009240800de372588c00025100002a8fd00100100072425886000a5fd0010251000020200c10525b8c00125b80000c600e0100000000025c0000001000d2413000524ffff0f247700a01025c8c000",
		"M801022b0,50:0100032425200000801003002110430001008424fcff851440180200020060141b00c3000d00070012c8000036002017252000023400a01100000000e402a0100000000025100002ffffa524eaffaf14",
		"M80102300,50:00000000ef0200170000000082fde0102a18340230fec01925180002252800002000062401006324ffff64242b20920004008010251060002120b00021206402000086a00100a5242a20b700f5ff8014",
		"M80102350,50:00000000258060006efd00102538000025302002010009242a10d400100040102128a6020000a3800100d124e0ff6224ff0042305900442c9f028010020008241080043c80100200d83d842421108200",
		"M801023a0,50:0000428c0000000008004000000000005cfd001021987002020060141b00c3000d000700010010262b689200103000002300a011251000023000392700ce190003ce19002568000021206402000099a0",
		"M801023f0,50:c1ff001001001824020060141b00a3000d000700010010262b301203102800001600c010251000023000392700ce190003ce19002530000021c07802000019a385fe001001000f2425fe001025200000",
		"M80102440,50:e2fd001025200000d8fd8010000000009502e0102b18b200dcfd00102510000201001824a4ff00102568000001000f2475fe001025300000cffe0010256800006afe00100100032494ff001001000324",
		"M80102490,50:8e0260102bc81203c7fe0010251000022b10120204004010010004262110700228000324000043a02b1092000400401002000326212064026e000224000082a02b107200040040100300042621186302",
		"M801024e0,50:75000224000062a02b1092000400401004000326212064026c000224000082a02b1072000400401005000426211863026c000224000062a0060010262b18920086006014251000022588c000f9fc0010",
		"M80102530,50:25380000d0ffa01121c0780237003927000019a39cfe001025680000f5fc001025800000ffff082525100002edfc0010010007241000c23325ff40102570e0022b10b20121ff40100100102621686d02",
		"M80102580,50:2b0002241dff00100000a2a1ffffce25010084241eff001025106000ffffad2501008424fcfd0010251060003affc0190200c4332510000220000d240900001030000524040060102318500021186202",
		"M801025d0,50:ffff65a0231850002a1877000f0260100000000001004224ffff4324f5ff80142b187200f8ff60102318500021186202f4ff0010ffff6da0f7fda0190200c4332510000220000e240900001030000624",
		"M80102620,50:040060102318500021186202ffff66a0231850002a187700fa0160100000000001004224ffff4324f5ff80142b187200f8ff60102318500021186202f4ff0010ffff6ea041fec018251000020200cd33",
		"M80102670,50:20000f240900001030000e24040060102318500021186202ffff6ea0231850002a187700e50160100000000001004224ffff4324f5ffa0152b187200f8ff60102318500021186202f4ff0010ffff6fa0",
		"M801026c0,50:0000c48efffff7260400c226ff0084301000a4af25b0400001fe001025400000ff00a5301000a5af2588c00025b04000a6fd00102568e00225b8000025f00000020008240200de372588c00025100002",
		"M80102710,50:010009247ffc00100100072421686d022d000224b5fe00100000a2a12118700230000624f3fd0010000066a02120640229000324000083a02588c00071fc001025380000adfce0120000000021107002",
		"M80102760,50:2128570020000d24231853002b187200020060100000000000004da001004224faffa21423185300000085902180f002251000029dfca01425b800005dfc00102588c0002b305200defdc01025300000",
		"M801027b0,50:21106202dbfd0010000043a078000324d7fd0010000043a02a10d401870140102128ae020000a48000000000e0ff8224ff0042305900432c02036010030026261080033c801002003c3f632421106200",
		"M80102800,50:0000428c0000000008004000000000002588c0012510000225b800002548000001001e24020008243afc0010010007242588c00125b800002548000025f00000cffc0010020008240000c58e2588c001",
		"M80102850,50:1000a5af0400d626256800002548000025f0000049fd0010020008242588c0012510000225b800002548000010001e240200082423fc00100100072425f000002588c0012510000225b8000025480000",
		"M801028a0,50:020008240400de371afc0010010007242588c0012510000225b8000002001e240200082493ff0010010009242a10d40146014010d0ff17252128ae020000a48000000000e0ff8224ff0042305900462c",
		"M801028f0,50:fefdc010030023261080063c80100200a040c6242110c2000000428c0000000008004000000000002588c00125b800002548000025f00000d5fc0010020008242588c0012548000025f00000ffff1724",
		"M80102940,50:5efd0010020008242588c0012510c00225b800002548000025f0000012fe0010020008242588c00125b800002548000025f000009bfc00100200082425b800002548000025f000000200082463fc0010",
		"M80102990,50:010063242a10d401140140102128ae020000a48003002626e0ff8224ff0042305900432cdd026010256800021080033c8010020004426324211062000000428c000000000800400000000000ad01e010",
		"M801029e0,50:25100002d0fee012200005242120f0022110700221209300231853002b1872000200601000000000000045a001004224faff8214231853002180f002251000022588c00025b80000bafb001025380000",
		"M80102a30,50:2588c0012510000225b800002548000025f0000002000824b2fb0010010007243afc0010258860000400c73325886000d1fd00102510c0028010170021b8570040b81700d0ff84242a107400db004010",
		"M80102a80,50:21b897002128a3020000a48001007124e0ff8224ff0042305900492c7501201125680002801002002110e2000000428c0000000008004000000000000200c733258860006dfd0010251000022a107400",
		"M80102ad0,50:c60040100100de372128a3020000a48001007124e0ff8224ff0042305900582c3000001325680002801002002110e2010000428c0000000008004000000000002a107400b50040100800de372128a302",
		"M80102b20,50:0000a48001007124e0ff8224ff0042305900582c1f0000132568000280100200211062010000428c0000000008004000000000002a107400a40040101000de372128a3020000a48001007124e0ff8224",
		"M80102b70,50:ff0042305900582c0e00001325680002801002002110c2010000428c000000000800400000000000253020020400c2260000c48efffff726c8fe001025886000258860002510000256fb001001000724",
		"M80102bc0,50:253020027efb00100200082473000224dc028210740082285bfc40106f000224d30282142588c00025f0000001000924e3fb00100200082425302002b8fb0010020008242530200254fc001002000824",
		"M80102c10,50:c2fb00100100c324c202821025f000006f008228e9ff401068000224b902821069008228ae024010640002249f0282106600022480028214000000002588c00001000924e3fb0010020008240400c733",
		"M80102c60,50:2510c00250fd001002000824253020028afb0010020008240000c48efffff7261000a4af0400d62695fc001002000824400002248b0282142588c00025f0000001000924f6fb00100200082480101700",
		"M80102cb0,50:21b8570040b81700d0ff63242a1034024a00401021b877002128b1020000a480630002240200c62425680002020008246efb821001000924640082282e0140102d000224defc82102e00822820014010",
		"M80102d00,50:23000224e7fc821000000000240082284c0140142500022451fb8210000000002b0002240cfd8210000000002588c000251000020100092402000824f5fa0010010007240200c73325100002cbfc0010",
		"M80102d50,50:020008242a103402240040101000de372128b1020000a480630002240200c6242568000249fb82100200082464008228d30040102d000224b9fc82102e008228c500401023000224c2fc821000000000",
		"M80102da0,50:240082285d004014250002242cfb8210000000002b000224e7fc8210000000002588c0002510000202000824d1fa0010010007242530200221fb0010020008242a103402deff40140800de37ccfa0010",
		"M80102df0,50:251000022a103402d9ff40140100de37c7fa0010251000022a103402d5ff40142128b102c2fa0010251000021efd001025804000f0fb0010258040004ffc00102580400025100002b6fa001025380000",
		"M80102e40,50:010010262b18b200b2fa6010251000029dfb001030000324020060141b00a3000d000700010010262b781203102800001200e011251000026bfd001030001924020060141b00c3000d00070001001026",
		"M80102e90,50:2bc09200103000000a0000132510000251fd0010300019240100102699fa60102510000243fb001030000324e7fb00101000a5af11fd00101000a6af010010264efc2013251000023000192421c07802",
		"M80102ee0,50:47fc0010000019a30000c48e2588c0001000a4af0400d62625480000ffff1724080007247000022425f0e00004fcc21502000824f8fb00100100de3720000224d0fc821000000000a6ff00102588c000",
		"M80102f30,50:8afb0010253020022530200287fb001001000924253020029dfa0010010009240bfb00100100092499fa001025302002dffa001025302002bdfa0010253020024cfc0010253020022588c00025b80000",
		"M80102f80,50:2548000002000824fdfa001008001e2425b800002548000002000824d0fa001008001e2425b80000254800000200082456fb001008001e2425b80000254800000200082408001e24d4fa00100100c325",
		"M80102fd0,50:25302002c2fa00100100092401000924d4fa001001006324fefa0010010009242530200269fc00100100092425302002a6fa001001000924fffff7260400c2260000c48eadfd00100100092418fb0010",
		"M80103020,50:0100092427fc001025302002253020023efb001001000924253020020cfc0010010009242530200243fc0010010009242530200282fa0010010009242530200210fc001001000924253020027dfc0010",
		"M80103070,50:0100092425100002a6fd0010010009242530600025f000000100092433fb001002000824b1fde0162588c000251000021cfa00102538e0023a008228160040103100822804fc40108010170030000224",
		"M801030c0,50:18fb82102588c0003fff0010251000026e00022482fa8210000000006f00822886fa40147300022435fa821074008228190040106f00022408008214700002249ffa00102588c000400002240e008214",
		"M80103110,50:58000224dafa00102588c00028ff8214000000000000c48e2510c000fffff726253020021000a4af0400d6262588400067fb001002000824f6ff8210000000001cff00102588c0007500022400fb8210",
		"M80103160,50:0400c22678000224eeff82100000000014ff00102588c0003afc0010253020023a0082282000401031008228cefb40108010170030000224e4fa821000000000e3fe00102588c0006e0002244cfa8210",
		"M801031b0,50:000000006f008228ecfb401473000224fff9821074008228160040106f000224cbff821070000224d4fe8214000000000000c48e2510c000fffff726253020021000a4af0400d6262588400001000924",
		"M80103200,50:37fb00100200082440000224c1ff821058000224f2ff821000000000c4fe00102588c00075000224cdfa82100400c22678000224eaff821000000000bcfe00102588c0002000022406fc821000000000",
		"M80103250,50:b7fe00102588c00064000224d9fe82142588c000cdfb0010020008245dfa00102588c000fbff82102588c000d2fe00102510000264000224c2fb82102588c000a8fe00102510000233fc001025302002",
		"M801032a0,50:befb001025302002fcf90010253020029cfa0010253020026dfb001025302002a5fb0010253020022530600025f0000001000924baf90010020008242588600025f000000100092425fa001002000824",
		"M801032f0,50:25b80000254800000200082497fa001008001e2425b800002548000002000824abf9001008001e2425b8000025480000020008248cfb001008001e2425b800002548000002000824c9f9001008001e24",
		"M80103340,50:25b80000254800000200082455fb001008001e2425b800002548000002000824c0fb001008001e242588c00025b8000025480000020008241afa001008001e2425b80000254800000200082483fb0010",
		"M80103390,50:08001e2425b800002548000002000824bef9001008001e242588c00025b80000254800000200082431fa001008001e2425b80000020008243efb001008001e2425b8000002000824cafc001008001e24",
		"M801033e0,50:25b80000254800000200082420fb001008001e242588c0002510000225b80000254800000200082408001e2441f900100100072425b800002548000025f000004efa0010020008242588c00025b80000",
		"M80103430,50:2548000025f00000d1f900100200082425b800002548000025f000002ffa00100200082425b800002548000025f0000002000824adf900100100c3252588c00025b800002548000025f00000d9f90010",
		"M80103480,50:0200082425b800002548000025f0000042fb0010020008240000c48e2588c0001000a4af0400d6262548000095fe0010ffff17242588c00025b800002548000025f00000eef900100200082425b80000",
		"M801034d0,50:25f00000fbfa00100200082425b800002548000025f00000e1fa00100200082425b800002548000025f0000016fb00100200082425b800002548000025f00000e4fa00100200082425b8000025480000",
		"M80103520,50:25f000004ffb00100200082441fd00102588c0002530600025f000000100092467f90010020008242530600025f0000001000924edf900100200082425f0000001000924020008246cf900100100c325",
		"M80103570,50:2588600025f000000100092499f90010020008242530600025f000000200082402fb0010010009242530600025f00000010009243df90010020008240000c48ecfff17251000a4af258860000400d626",
		"M801035c0,50:50fe0010010009242588600025f0000001000924aaf90010020008242530600025f0000001000924d0f90010020008242530600025f0000002000824d6fa0010010009242530600025f0000001000924",
		"M80103610,50:13f90010020008242530600025f00000020008240ffb00100100092425f000000100092419f90010020008247800022423008210000000002588c0002510000225f000000100092402000824adf80010",
		"M80103660,50:01000724fef8001002000824020008248cfa0010010009243a00822884fd4010310082280b00401025f0000030000224edff82140000000001000924a3f900100200082425f000000200082470fa0010",
		"M801036b0,50:0100092483fa001002000824b5fa001025f0000058000224dfff8214000000000000c48ecfff17251000a4af2588c0000400d6262570600006fe00100100092469000224f1ff82106c000224d2ff8214",
		"M80103700,50:0000000025f00000010009247ff90010020008240100092402000824fff800100100632401000924edf800100200082470000224e6ff821000000000c3ff00102588c00025f00000010009249cf80010",
		"M80103750,50:020008241080043c336284241080053c846ba524000080a02a088500fdff2014010084241080043c886b84241800053ce60d0408000000001080023c846b42240800e003000000001c808227000044ac",
		"M801037a0,50:20808227000045ac000080ac040080ac0800e003080080ac03008424822004001c8086270000c68c802004002528c0000400a68c0800a38c2310c50011006010000000002400c01000000000e8ff4224",
		"M801037f0,50:231043002a084400f4ff2014000000000c00a22421104300000045ac040046ac080044ac0400a2ac0000c2ac0800e0030c0042240700c01000000000f4ff42242a084400e5ff2014000000000b000010",
		"M80103840,50:000000001c8083270000638c208082270000428c2318a300211864000c0063242a08430016002014000000000800a4ac0800e0030c00a2242130a3000c00c6241c8083270000638c208082270000428c",
		"M80103890,50:2318c300211864000c0063242a08430007002014000000000000c5ac0400c0ac0800c4ac0400a6ac0800e0030c00c2240800e0032510000018008500fcffbd270000bfafee0d040c1220000025204000",
		"M801038e0,50:12280000000080ac0400a520fdffa01c040084240000bf8f0400bd270800e00300000000f4ff84240000858c0400868c0800a010000000000400c010000000000400a6ac0800e0030000c5ac0800e003",
		"M80103930,50:0400a0ac0800e003080080ac251080000400c018ffffc620000085a0fbff0010010084240800e00300000000a0000a24080040013c000924000000000000000000000000000000000000000000000000",
		"M80103980,50:48454c4c4f20574f524c442025630a00434f554e5445523d25640a002d696e6600000000696e66006e616e00642210807822108078221080a420108078221080601a1080782210807822108078221080",
		"M801039d0,50:78221080782210805821108078221080702010807822108078221080241d1080c4201080c4201080c4201080c4201080c4201080c4201080c4201080c4201080c4201080782210807822108078221080",
		"M80103a20,50:7822108078221080782210807c1c108078221080782210807822108078221080782210807822108078221080782210807822108078221080782210807822108078221080782210807822108078221080",
		"M80103a70,50:78221080782210807822108078221080782210807822108078221080b01e1080782210807822108078221080782210807822108078221080782210807822108078221080782210809c1a10809c211080",
		"M80103ac0,50:78221080e01b1080782210801c1b10809c2110807822108078221080001d108078221080e01a10807c1b1080b01e10807822108078221080c0191080782210805c1d10807822108078221080b01e1080",
		"M80103b10,50:c8271080302a1080302a108010281080302a10804c1a1080302a1080302a1080302a1080302a1080302a10806c281080302a10808c281080302a1080302a1080b0281080cc281080cc281080cc281080",
		"M80103b60,50:cc281080cc281080cc281080cc281080cc281080cc281080302a1080302a1080302a1080302a1080302a1080302a108018291080302a1080302a1080302a1080302a1080302a1080302a1080302a1080",
		"M80103bb0,50:302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a1080302a108030291080302a1080302a1080302a1080",
		"M80103c00,50:302a1080302a1080302a1080302a1080302a1080302a1080302a1080881a108048291080302a108064291080302a10807c29108048291080302a1080302a108094291080302a1080cc1a108030281080",
		"M80103c50,50:30291080302a1080302a1080ac191080302a108048281080302a1080302a108030291080102b1080b02b1080b02b1080cc2a1080b02b1080601a1080b02b1080b02b1080b02b1080b02b1080b02b1080",
		"M80103ca0,50:542b1080b02b1080bc2a1080b02b1080b02b1080241d1080682a1080682a1080682a1080682a1080682a1080682a1080682a1080682a1080682a1080b02b1080b02b1080b02b1080b02b1080b02b1080",
		"M80103cf0,50:b02b10807c1c1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080",
		"M80103d40,50:b02b1080b02b1080b02b1080b02b1080b02b1080982b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b1080b02b10809c1a1080582a1080b02b1080e01b1080",
		"M80103d90,50:b02b1080502a1080582a1080b02b1080b02b108068231080b02b1080e01a10807c1b1080982b1080b02b1080b02b1080c0191080b02b10805c1d1080b02b1080b02b1080982b1080e02d1080082e1080",
		"M80103de0,50:082e1080f42d1080082e1080d42d1080082e1080082e1080082e1080082e1080082e1080542d1080082e1080442d1080082e1080082e10801c1d1080ac2c1080ac2c1080ac2c1080ac2c1080ac2c1080",
		"M80103e30,50:ac2c1080ac2c1080ac2c1080ac2c1080082e1080082e1080082e1080082e1080082e1080082e1080a42c1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080",
		"M80103e80,50:082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080082e1080782c1080082e1080082e1080082e1080082e1080082e1080",
		"M80103ed0,50:082e1080082e1080082e1080082e1080082e10806c2c10805c2c1080082e1080542c1080082e1080102c10805c2c1080082e1080082e1080082e1080082e1080f82b1080f02b1080782c1080082e1080",
		"M80103f20,50:082e1080c02b1080082e1080042c1080082e1080082e1080782c108054331080f4331080f433108040331080f43310802c331080f4331080f4331080f4331080f4331080f433108018331080f4331080",
		"M80103f70,50:e0331080f4331080f4331080d0331080c0331080c0331080c0331080c0331080c0331080c0331080c0331080c0331080c0331080f4331080f4331080f4331080f4331080f4331080f4331080a8331080",
		"M80103fc0,50:f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080",
		"M80104010,50:f4331080f4331080f4331080e82e1080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f4331080f43310809433108080331080f433108068331080f4331080b82f1080",
		"M80104060,50:80331080f4331080f4331080a42f1080f4331080902f1080782f1080e82e1080f4331080f433108004331080f4331080f0321080f4331080f4331080e82e108018361080ec201080ec20108094201080",
		"M801040b0,50:ec20108004361080ec201080ec201080ec201080ec201080ec201080f0351080ec20108060201080ec201080ec201080dc351080b8201080b8201080b8201080b8201080b8201080b8201080b8201080",
		"M80104100,50:b8201080b8201080ec201080ec201080ec201080ec201080ec201080ec201080c8351080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080",
		"M80104150,50:ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ec201080ac351080ec201080ec201080ec201080ec201080ec201080ec201080ec201080",
		"M801041a0,50:ec201080ec201080ec2010809835108084351080ec20108070351080ec2010805c35108084351080ec201080ec20108048351080ec20108034351080dc321080ac351080ec201080ec201080c8321080",
		"M801041f0,50:ec20108080301080ec201080ec201080ac351080183510802c3510802c351080043510802c351080501a10802c3510802c3510802c3510802c3510802c351080f03410802c351080dc3410802c351080",
		"M80104240,50:2c351080f8261080cc341080cc341080cc341080cc341080cc341080cc341080cc341080cc341080cc3410802c3510802c3510802c3510802c3510802c3510802c351080b43410802c3510802c351080",
		"M80104290,50:2c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c351080",
		"M801042e0,50:2c351080983410802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510802c3510808c1a1080843410802c3510806c3410802c35108054341080843410802c351080",
		"M80104330,50:2c351080403410802c351080d01a108028341080983410802c3510802c351080b01910802c351080143410802c3510802c351080983410806830108074301080743010805c3010807430108050301080",
		"M80104380,50:743010807430108074301080743010807430108044301080743010803830108074301080743010802c301080243010802430108024301080243010802430108024301080243010802430108024301080",
		"M801043d0,50:7430108074301080743010807430108074301080743010801c30108074301080743010807430108074301080743010807430108074301080743010807430108074301080743010807430108074301080",
		"M80104420,50:7430108074301080743010807430108074301080743010807430108074301080743010807430108008301080743010807430108074301080743010807430108074301080743010807430108074301080",
		"M80104470,50:74301080fc2f1080f02f108074301080e82f108074301080dc2f1080f02f108074301080743010806023108074301080d02f1080502f1080083010807430108074301080442f108074301080382f1080",
		"M801044c0,50:74301080743010800830108078311080b42b1080b42b1080702f1080b42b1080682f1080b42b1080b42b1080b42b1080b42b1080b42b1080c0321080b42b1080b8321080b42b1080b42b1080b0321080",
		"M80104510,50:243010802430108024301080243010802430108024301080243010802430108024301080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080801c1080b42b1080b42b1080b42b1080b42b1080",
		"M80104560,50:b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080c0261080",
		"M801045b0,50:b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080a8321080a0321080b42b1080e41b1080b42b1080e02f1080a0321080b42b1080b42b108098321080",
		"M80104600,50:b42b1080602f1080801b1080c0261080b42b1080b42b1080582f1080b42b1080302f1080b42b1080b42b1080c026108078311080b42b1080b42b1080702f1080b42b1080682f1080b42b1080b42b1080",
		"M80104650,50:b42b1080b42b1080b42b1080c0321080b42b1080b8321080b42b1080b42b1080b0321080243010802430108024301080243010802430108024301080243010802430108024301080b42b1080b42b1080",
		"M801046a0,50:b42b1080b42b1080b42b1080b42b1080801c1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080",
		"M801046f0,50:b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080c0261080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080a8321080",
		"M80104740,50:a0321080b42b1080e41b1080b42b1080e02f1080a0321080b42b1080b42b108098321080b42b1080602f1080801b1080c0261080b42b1080b42b1080582f1080b42b1080302f1080b42b1080b42b1080",
		"M80104790,50:c026108078311080b42b1080b42b1080702f1080b42b1080682f1080b42b1080b42b1080b42b1080b42b1080b42b1080c0321080b42b1080b8321080b42b1080b42b1080b03210802430108024301080",
		"M801047e0,50:24301080243010802430108024301080243010802430108024301080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080801c1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080",
		"M80104830,50:b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080c0261080b42b1080b42b1080",
		"M80104880,50:b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080b42b1080a8321080a0321080b42b1080e41b1080b42b1080e02f1080a0321080b42b1080b42b108098321080b42b1080602f1080",
		"M801048d0,28:801b1080c0261080b42b1080b42b1080582f1080b42b1080302f1080b42b1080b42b1080c0261080",
		"M801048f8,18:000001000100000300000000000000000000000000000000",
		"M80105910,50:10000000080000002c0000000000e001100001000000ffff000000000000000000000000000000000000000000000000000000000c080000800200002000200000010000000101000001010010110000",
		"M80105960,50:0000000000110000001100000010000010000000000000000000000000000000000000000000000000000000001101000001000000010100000101000101010010001000100001000011000000010000",
		"M801059b0,50:0001000000010000000100000000000000000000000000000000100010001000000100000000000010111100010100001101010010000000000100001000000000100000010101000001000000000000",
		"M80105a00,50:0000000000000000000001001000110000010000000000000001010010110000101000000101010000000000100000000010000010110000111101000000000011110100000000000010000010101000",
		"M80105a50,50:0001000000000000101111000001010000010100011001000000000010000000001000000101010000010000000000000000000000000000000100001001100000000000000000000001010001010100",
		"M80105aa0,50:1010110001100000000000000001000000010000000100000001000000110000000000000011000010000000100010000001000000000000000101001011000001000100100111000000000000100000",
		"M80105af0,50:1000000000000000000000000011000000000000001100000100000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010010000",
		"M80105b40,50:0000000000000000000000000000000000100000001101000011010000100100101111000010010010111100001101000011010000000000000000000000010000000000100000000011010000111100",
		"M80105b90,50:0011000010001000100010000001010010000000000100000000100010001000100010000011000000110000001000000000000000010000100010001000000110100000000010000000100010000100",
		"M80105be0,50:1000000010000000000010001000100010001000001100000011000000010000101111000010000000001000101001010010000000100100001001001011110010110100101101000000010000110100",
		"M80105c30,50:0011110000000000000000001000000000000000000001000000010010100101001000000001000000001000000001000000100010001000001000001000100000001000000000000000000000010000",
		"M80105c80,50:1011110000100000001000001010110000100000100000001000100000000100000010001000100000100000100010000000010000110000001100000010000000000000000100000000000010000000",
		"M80105cd0,50:1011110010111100001101000000010010110100001101000010000000110100001100000011000000110000000001000000000010000000001000000011110100000000000000000000000000000000",
		"M80105d20,50:0000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000010000010110100001101001011010010111100101111000011110010001000",
		"M80105d70,50:1011110000001000100010001000000010001000100010000011010010110100000101001000100010001000100010001000000010000000100000001000100000100000000010001000100010000000",
		"M80105dc0,50:1001110010001000100010001000100010001000100010001000000010001000100000001000000010000000100010000010000000001000100001001000000010101000100110001000100010001000",
		"M80105e10,50:1000100010110100100000001000100010110000101100001010110010111100001000000000100010110000100000001000100010101000100010001000100010111100100010001000000010001000",
		"M80105e60,50:1000000010000000100010001000100000100000100010001000010010000000100010001000110010001000101101001000100010001000100010001000100010000000100000001000100010001000",
		"M80105eb0,50:0010000010001000100010001000000010001000100010001000100010000000100010001011010000110100101101001011110010000000001101001000100010111100001101001000100010111100",
		"M80105f00,50:1000100010001000001101001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"M80105f50,50:0011010010110100001101001011110010001000100010001000100010001000100010001011110000110100010000000011010000100000000000000011000010001000100010001000100000100000",
		"M80105fa0,50:1000100010001000100010001000100010001000000010000001000010000000000001000011010000000000001100001000100010001000100000000010000010001000100010001000100000010100",
		"M80105ff0,50:1000100000000100000100000001000000000100100111000000000000100000100010001011010000110100001000001000100010001000100010000010000000010100001000000001000000100000",
		"M80106040,50:0000010000000000000000000000000010101000100010000000100000100000100010001000100010101000000101000010000000010000000100000000010000000100000000000000000000000000",
		"M80106090,50:1000010010001000100010000010000010001000000101001001110010001000001000001000000000010000000010000000010000000000000000000000000000111000100010000011010000100000",
		"M801060e0,50:0011010000100000100010001000100000100000101111000011010000000001001101000000000011111100000000000000000000000000000000000000000000000000000000000000000000000000",
		"M80106130,50:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"M80106180,50:00000000000000003c111080406b108000000000586110800000000000000000000000000000000000000000000000000000000030e210805653796e633a2074696d656f75740a005265736574477261",
		"M801061d0,50:70683a6974623d253038782c65686b3d253038780a007073786770752070726f6772616d73206279204c616d6567757936340a323031392050536e30306253444b2050726f6a656374202f204d656964",
		"M80106220,13:6f2d54656b2050726f64756374696f6e730a00#bf",
	}

	for _, entry := range testData {
		addr, size, data := parseMemoryWrite(entry)
		fmt.Println(addr, size, data)
		writeMemoryToPsx(serialPort, addr, size, data)
	}
}

func readAllPsxRegisters(port serialport) string {
	fmt.Println("Writing register command")

	registersBuffer := make([]byte, 152)
	writeCommandToPsx(port, "g")

	for x := 0; x < 38; x++ {
		register := readPsxRegister(port)

		copy(registersBuffer[4*x:], register)
	}

	registers := strings.Trim(string(hex.EncodeToString(registersBuffer)), "\000")

	return formatGdbPacket(registers)
}

func readPsxRegister(port serialport) []byte {
	port.Write([]byte("#"))
	registerBuffer := make([]byte, 8)
	port.Read(registerBuffer)

	regHexStr, _ := hex.DecodeString(string(registerBuffer))
	byteReg := make([]byte, 4)
	regInt := binary.BigEndian.Uint32(regHexStr)

	binary.LittleEndian.PutUint32(byteReg, regInt)

	fmt.Printf("reg: %x \n", byteReg)

	return byteReg
}

func readPsxMemory(serialPort serialport, addr string, sizeStr string) string {
	fmt.Println("Writing memory command")
	writeCommandToPsx(serialPort, "m")

	fmt.Println("Writing address command")
	writeAddressToPsx(serialPort, addr)

	fmt.Println("Writing size command")
	writePacketSizeToPsx(serialPort, sizeStr)

	size, _ := strconv.ParseUint(sizeStr, 16, 32)

	singleCharBuffer := make([]byte, 2)
	memoryData := make([]byte, size*2)

	for x := 0; x < int(size)*2; x++ {
		serialPort.Write([]byte("#"))
		serialPort.Read(singleCharBuffer)
		copy(memoryData[x:], singleCharBuffer[0:])
		acknowledgeResponse(serialPort)
		x++
	}

	return formatGdbPacket(string(memoryData))
}

func main() {
	var debuggerState DebuggerState

	baudratePtr := flag.Int("baudrate", 115200, "Serial baudrate speed")
	serialdevicePtr := flag.String("device", "", "Serial device, e.g. /dev/ttyUSB0")

	tcpPortPtr := flag.String("port", "8888", "GDB port")

	flag.Parse()

	serialConfig := SerialConfig{*baudratePtr, *serialdevicePtr}
	gdbConfig := GdbConfig{*tcpPortPtr}

	fmt.Println("baudrate: ", serialConfig.baud)
	fmt.Println("device: ", serialConfig.device)
	fmt.Println("tcp port", gdbConfig.tcpPort)

	gdbHexStr, _ := hex.DecodeString("d0febd272c01bfaf2801beaf25f0a0033001c4")

	if len(gdbHexStr)%2 != 0 {
		paddedHexStr := make([]byte, len(gdbHexStr)+1)
		copy(paddedHexStr, gdbHexStr[0:])
		gdbHexStr = paddedHexStr
	}

	for i := 0; i < len(gdbHexStr); i += 4 {
		converted := binary.LittleEndian.Uint32(gdbHexStr[i:])
		fmt.Printf("%#08x \n", converted)
	}

	port := initializeSerialPort(serialConfig.device, int(serialConfig.baud))

	// fmt.Println(memoryInValidRange("51ffec0"))

	//fmt.Println(readPsxMemory(port, "051ffec0", "40"))

	listener, err := net.Listen("tcp", ":"+*tcpPortPtr)

	if err != nil {
		fmt.Println(err)
		return
	}

	for {
		conn, err := listener.Accept()
		if err != nil {
			continue
		}

		handleGdbClient(conn, port, &debuggerState)
	}

	defer port.Close()
}

func formatGdbPacket(message string) string {
	byteSlice := []byte(message)
	var checksumTotal int64

	for _, b := range byteSlice {
		checksumTotal += int64(b)
	}

	checksumTotal = checksumTotal % 256

	hexChecksum := strconv.FormatInt(checksumTotal, 16)

	if len(hexChecksum) < 2 {
		hexChecksum = "0" + hexChecksum
	}

	gdbFormattedPackage := "$" + message + "#" + hexChecksum

	fmt.Println(gdbFormattedPackage)
	return gdbFormattedPackage
}

func acknowledgeWithOk(conn net.Conn) {
	conn.Write([]byte("+"))
	conn.Write([]byte(formatGdbPacket("OK")))
}

func acknowledgeWithEmpty(conn net.Conn) {
	conn.Write([]byte("+$#00"))
}

func getPredefinedResponse(conn net.Conn, request string, requests []string, acknowledgementFunc func(net.Conn)) bool {
	var fulfilled bool

	for _, entry := range requests {
		fulfilled = strings.Contains(request, entry)

		if fulfilled {
			acknowledgementFunc(conn)
			break
		}
	}

	return fulfilled
}

func readMemory(serialPort serialport, request string) string {
	return sendSerialCommand(serialPort, formatGdbPacket(request))
}

func cleanupSerialData(data string) string {
	fmt.Println(data)
	startIndex := strings.Index(data, "$")

	if startIndex == -1 {
		fmt.Println("Not a valid gdb request package")
		return ""
	}

	endIndex := strings.Index(data, "#")

	if endIndex == -1 {
		fmt.Println("Not a valid gdb terminating request package")
		return ""
	}

	return data[startIndex+1 : endIndex]
}

func sendSerialCommand(serialPort serialport, cmd string) string {
	tmpBuffer := make([]byte, 1)
	readBuffer := make([]byte, 4096)

	fmt.Println("Sending the following command", cmd)

	n, err := serialPort.Write([]byte(cmd))

	fmt.Println("Num bytes written", n)

	if err != nil {
		fmt.Println("Could not push read registers command to PSX", err)
	}

	for {
		_, err := serialPort.Read(tmpBuffer)

		if err != nil {
			fmt.Println("Could not read registers from PSX", err)
			break
		} else {
			readBuffer = append(readBuffer, tmpBuffer...)
			if string(tmpBuffer) == "#" {
				break
			}
		}
	}

	fmt.Printf("readbuffer is: %s", readBuffer)

	cleanedData := cleanupSerialData(string(readBuffer))
	fmt.Println("cleaned data is ", cleanedData)

	return formatGdbPacket(cleanedData)
}

func memoryInValidRange(addr string) bool {
	memHexBytes, _ := hex.DecodeString(addr)
	memInt := binary.BigEndian.Uint32(memHexBytes)

	if memInt > 0x80000000 {
		return true
	}

	return false
}

func parseGdbRequest(conn net.Conn, serialPort serialport, request string, debuggerState *DebuggerState) {
	var emptyResponsesFor = []string{"qTStatus", "vMustReplyEmpty", "qC", "vCont?", "X", "qSymbol::"}
	var okResponseFor = []string{"Hg0", "Hg1", "Hc-1", "Hc0", "Hc1", "qThreadExtraInfo", "qfThreadInfo", "qsThreadInfo"}

	acknowledged := getPredefinedResponse(conn, request, emptyResponsesFor, acknowledgeWithEmpty)

	if acknowledged {
		return
	}

	acknowledged = getPredefinedResponse(conn, request, okResponseFor, acknowledgeWithOk)

	if acknowledged {
		return
	}

	switch {
	case string(request[0]) == "g":
		conn.Write([]byte("+"))
		conn.Write([]byte(readAllPsxRegisters(serialPort)))
	case string(request[0]) == "m":
		conn.Write([]byte("+"))
		mAddr, mSize := parseMemoryRead(request)

		if mAddr == "00000000" {
			conn.Write([]byte(formatGdbPacket("")))
			break
		}

		fmt.Println(mAddr, mSize)
		conn.Write([]byte(readPsxMemory(serialPort, mAddr, mSize)))
	case string(request[0]) == "M":
		mAddr, mSize, mData := parseMemoryWrite(request)
		writeMemoryToPsx(serialPort, mAddr, mSize, mData)
		acknowledgeWithOk(conn)
	case string(request[0]) == "p":
		fmt.Println("reading a register")
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("")))
	case string(request[0]) == "P":
		pAddr := parseRegisterAddress(request)
		debuggerState.continueAddress = pAddr
		fmt.Println("writing a register")
		conn.Write([]byte("+"))
		acknowledgeWithOk(conn)
	case string(request[0]) == "c":
		writeCommandToPsx(serialPort, "c")
		fmt.Println("Writing address command")
		writeAddressToPsx(serialPort, debuggerState.continueAddress)
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("S05")))
	case string(request[0]) == "Z":
		bAddr := parseBreakpointWrite(request)
		debuggerState.continueAddress = bAddr
		writeCommandToPsx(serialPort, "Z")
		fmt.Println("Writing address command")
		writeAddressToPsx(serialPort, bAddr)
		acknowledgeResponse(serialPort)
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("OK")))
	case string(request[0]) == "z":
		bAddr := parseBreakpointWrite(request)
		writeCommandToPsx(serialPort, "z")
		writeAddressToPsx(serialPort, bAddr)
		acknowledgeResponse(serialPort)
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("OK")))
	case string(request[0]) == "s":
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("S05")))
	case strings.Contains(request, "qSupported"):
		msg := "PacketSize=200"
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket(msg)))
	case string(request[0]) == "?":
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("S00")))
	case strings.Contains(request, "qOffsets"):
		msg := "Text=0;Data=0;Bss=0"
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket(msg)))
	case strings.Contains(request, "qAttached"):
		conn.Write([]byte("+"))
		conn.Write([]byte(formatGdbPacket("1")))
	}
}

func handlePacket(conn net.Conn, serialPort serialport, packet string, debuggerState *DebuggerState) {
	if packet == "+" {
		return
	}

	startIndex := strings.Index(packet, "$")

	if startIndex == -1 {
		fmt.Println("Not a valid gdb request package")
		return
	}

	endIndex := strings.Index(packet, "#")

	if endIndex == -1 {
		fmt.Println("Not a valid gdb terminating request package")
		return
	}

	parseGdbRequest(conn, serialPort, packet[startIndex+1:endIndex], debuggerState)
}

func parseGdbPacket(packet string) string {
	startIndex := strings.Index(packet, "$")

	if startIndex == -1 {
		fmt.Println("Not a valid gdb request package", packet)
	}

	endIndex := strings.Index(packet, "#")

	if endIndex == -1 {
		fmt.Println("Not a valid gdb terminating request package", packet)
	}

	return packet[startIndex+1 : endIndex]
}

func handleGdbClient(conn net.Conn, serialPort serialport, debuggerState *DebuggerState) {
	defer conn.Close()

	var buff [2048]byte

	for {
		bytesRead, err := conn.Read(buff[0:])

		if err != nil {
			conn.Close()
			fmt.Println(err)
			return
		}

		request := string(buff[0:bytesRead])

		if bytesRead > 0 {

			handlePacket(conn, serialPort, request, debuggerState)
		}
	}
}
